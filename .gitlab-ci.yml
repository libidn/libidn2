# Copyright (C) 2016-2024 Simon Josefsson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

workflow:
  rules:
  - if: $CI_COMMIT_BRANCH

# The "quick" stage should complete as quickly as possible but still
# excercise some useful internal self-tests.  Primarily this is
# achieved by --disable-doc and avoiding the 'make dist' step.  Having
# an early stage like this avoids wasting build cycles attempting the
# bootstrap builds on many platforms.
#
# The "build" stage should attempt to build from version controlled
# sources on platforms we support development on, with the variety of
# pre-dependencies that we want to support.  Typically these builds
# results in a tarball artifact.
#
# The "test" stage attempt to build the tarball on all platforms we
# support building the project on, with as many combinations of
# pre-depencencies as useful.

stages:
  - quick
  - build
  - test

default:
  interruptible: true
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
    - "*.tar.gz"
    - ./*.log
    - ./config.h
    - ./**/*.log

Q-Debian-testing:
  image: $CI_REGISTRY/libidn/build-images:libidn2-mini-Debian-testing
  stage: quick
  script:
  - echo GNULIB_REFDIR $GNULIB_REFDIR GNULIB_SRCDIR $GNULIB_SRCDIR
  - apt-get install -y idn2 libidn2-dev libunistring-dev | tail
  - env STANDALONE_DISABLE='*punycode* *test-IdnaTest-inc*' tests/standalone.sh
  - apt-get remove -y --purge libidn2-dev libunistring-dev | tail
  - time ./bootstrap --skip-po
  - git diff --exit-code # catch changes resulting in *-dirty version number
  - mkdir -p q
  - cd q
  - time ../configure CFLAGS=-O0 --enable-gcc-warnings=error --disable-doc --with-included-libunistring
  - grep am_cv_func_iconv_summary config.log
  - time make -j$(nproc) -k syntax-check
  - time make -j$(nproc) -k V=1 check VERBOSE=t
  - env IDN2=src/idn2 STANDALONE_CFLAGS="-DHAVE_CONFIG_H -I. -Ilib -I../lib -Itests -Iunistring -I../unistring lib/.libs/libidn2.a unistring/.libs/libunistring.a gl/.libs/libgnu.a" ../tests/standalone.sh
  - env IDN2=src/idn2 STANDALONE_CFLAGS="-DHAVE_CONFIG_H -I. -Ilib -I../lib -Itests -Iunistring -I../unistring -Wl,-rpath lib/.libs lib/.libs/libidn2.so unistring/.libs/libunistring.a gl/.libs/libgnu.a" ../tests/standalone.sh
  - git diff --exit-code # nothing should change version controlled files

B-gcc:
  image: gcc:latest
  stage: build
  before_script:
  - gcc --version
  - apt-get update -qqy
  - apt-get install -qqy --no-install-recommends git make autoconf automake libtool gettext autopoint gperf libunistring-dev gengetopt help2man texinfo texlive gtk-doc-tools
  script:
  - gcc --version
  - time ./bootstrap --skip-po
  - time ./configure CC="gcc -std=gnu2x" --enable-gcc-warnings=error --disable-doc
  - time make -j$(nproc) -k V=1
  - time make -j$(nproc) -k syntax-check
  - time make -j$(nproc) -k check VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-clang:
  image: silkeh/clang:latest
  stage: build
  before_script:
  - clang --version
  - apt-get update -qqy
  - apt-get install -qqy --no-install-recommends git make autoconf automake libtool gettext autopoint gperf libunistring-dev gengetopt help2man texinfo texlive gtk-doc-tools
  script:
  - clang --version
  - time ./bootstrap --skip-po
  - time ./configure CC="clang -std=gnu2x" --enable-gcc-warnings=error --disable-doc
  - time make -j$(nproc) -k syntax-check
  - time make -j$(nproc) -k V=1
  - time make -j$(nproc) -k check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-Alpine-arm64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: alpine:latest
  tags: [ arm64 ]
  stage: build
  before_script:
  - apk update # XXX coreutils only needed for /usr/bin/join used by gnulib-tool
  - apk add gcc make libc-dev git autoconf automake libtool gettext-dev gperf gengetopt patch coreutils
  script:
  - time ./bootstrap --skip-po
  - time ./configure --disable-doc --enable-gcc-warnings=error
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) -k V=1
  - time make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-AlmaLinux8:
  image: $CI_REGISTRY/libidn/build-images:libidn2-AlmaLinux8
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) -k V=1
  - time make -j$(nproc) -k check VERBOSE=t
  - make -j$(nproc) -k syntax-check
  - make abi-check
  - time make dist
  - git diff --exit-code # nothing should change version controlled files

B-Debian12:
  image: $CI_REGISTRY/libidn/build-images:libidn2-Debian12
  stage: build
  script:
  - ./bootstrap --skip-po
  - ./configure --enable-gcc-warnings=error --enable-valgrind-tests
  - make -j$(nproc) V=1 -k check VERBOSE=t
  - make -C doc compare-makefile
  - make -j$(nproc) syntax-check
  - make abi-check
  - make dist
  - git diff --exit-code # nothing should change version controlled files

B-Debian-testing:
  image: debian:testing
  stage: build
  before_script:
  - apt-get update -qq -y
  - apt-get install -qq -y make gcc git autoconf automake libtool gettext autopoint gperf libunistring-dev valgrind gengetopt help2man texinfo texlive gtk-doc-tools abi-compliance-checker abigail-tools libidn2-dev idn2
  script:
  - env STANDALONE_DISABLE='*punycode* *IdnaTest-inc*' tests/standalone.sh
  - apt-get remove -y --purge libidn2-dev idn2
  - ./bootstrap --skip-po
  - ./configure --enable-gcc-warnings=error --enable-valgrind-tests
  - make -j$(nproc) V=1
  - make -j$(nproc) -k check VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files
  - rm unistring/libunistring.la # FIXME XXX debug why this is needed...
  - make dist
  - env IDN2=src/idn2 STANDALONE_CFLAGS="-Ilib lib/.libs/libidn2.a unistring/.libs/libunistring.a gl/.libs/libgnu.a -lunistring" tests/standalone.sh
  - env IDN2=src/idn2 STANDALONE_CFLAGS="-Ilib -Wl,-rpath lib/.libs lib/.libs/libidn2.so unistring/.libs/libunistring.a gl/.libs/libgnu.a -lunistring" tests/standalone.sh
  - make install
  - apt-get install -y -qq man
  - git clone --depth=1 https://salsa.debian.org/debian/libidn2.git debian-libidn2
  - for c in debian-libidn2/debian/tests/*; do if test -x $c; then $c; echo rc $c is $?; fi; done

B-Trisquel11:
  image: $CI_REGISTRY/libidn/build-images:libidn2-Trisquel11
  stage: build
  script:
  - ./bootstrap --skip-po
  - ./configure --enable-gcc-warnings=error --enable-valgrind-tests
  - make -j$(nproc) V=1
  - make -j$(nproc) -k check VERBOSE=t
  - make -C doc compare-makefile
  - make -j$(nproc) -k syntax-check
  - env IDN2=src/idn2 STANDALONE_CFLAGS="-Ilib -Itests lib/.libs/libidn2.a unistring/.libs/libunistring.a gl/.libs/libgnu.a -lunistring" tests/standalone.sh
  - env IDN2=src/idn2 STANDALONE_CFLAGS="-Ilib -Itests -Wl,-rpath lib/.libs lib/.libs/libidn2.so unistring/.libs/libunistring.a gl/.libs/libgnu.a -lunistring" tests/standalone.sh
  - make abi-check
  - make dist
  - git diff --exit-code # nothing should change version controlled files

B-armcross:
  image: $CI_REGISTRY/libidn/build-images:libidn2-Debian12
  stage: build
  before_script:
  - apt-get update -qq -y
  - apt-get install -y -q gcc-arm-linux-gnueabi qemu-user qemu-user-binfmt file binfmt-support
  - update-binfmts --enable qemu-arm
  script:
  - ./bootstrap --skip-po
  - ./configure --enable-gcc-warnings=error --disable-doc
  - make -j$(nproc) -k V=1
  - ./configure --enable-gcc-warnings=error --disable-doc --host=arm-linux-gnueabi CFLAGS="-static --static"
  - make -j$(nproc) -k V=1
  - file src/idn2
  - LANG=C.UTF-8 qemu-arm src/idn2 --debug foo
  - LANG=C.UTF-8 src/idn2 --debug räksmörgås
  - LANG=C.UTF-8 make -j$(nproc) -k check VERBOSE=t

# https://releases.llvm.org/13.0.0/tools/clang/docs/AddressSanitizer.html
# https://releases.llvm.org/13.0.0/tools/clang/docs/UndefinedBehaviorSanitizer.html
# https://lists.gnu.org/archive/html/bug-gnulib/2022-03/msg00016.html
B-Fedora39-ASAN/UBSan:
  stage: build
  image: $CI_REGISTRY/libidn/build-images:libidn2-Fedora39
  before_script:
  - dnf install -y clang
  script:
  - ./bootstrap --skip-po
  - export CC=clang
  - export CFLAGS="-fsanitize=address -g -O0"
  - ASAN_OPTIONS=detect_leaks=0 ./configure --disable-doc --disable-gcc-warnings
  - ASAN_OPTIONS=detect_leaks=0 make V=1 -j$(nproc) check VERBOSE=t
  - make clean
  - export CFLAGS="-fsanitize=undefined,integer -fno-sanitize-recover=undefined,integer -g -O0"
  - ./configure --disable-doc --disable-gcc-warnings
  - make V=1 -C unistring
  - make V=1 -C gl
  - make V=1 -C lib CFLAGS="$CFLAGS -Wall -Wextra -Werror"
  - make V=1 -C examples CFLAGS="$CFLAGS -Wall -Wextra -Werror -Wno-unused-parameter"
  - make V=1 -j$(nproc) check VERBOSE=t

B-Fedora39-clang-analyzer:
  stage: build
  image: $CI_REGISTRY/libidn/build-images:libidn2-Fedora39
  before_script:
  - dnf install -y clang-analyzer
  script:
  - ./bootstrap --skip-po
  - scan-build ./configure --enable-gtk-doc --enable-gtk-doc-pdf
  - make -j$(nproc) -C unistring
  - make -j$(nproc) -C gl
  - scan-build -o clang-analyzer make -j$(nproc) -C lib
  - make
  - make web-manual
  - make dist
  artifacts:
    when: on_success
    paths:
    - doc/reference
    - doc/manual
    - clang-analyzer

sast:
  stage: quick
  # SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
  variables:
    SAST_EXCLUDED_PATHS: examples, fuzz, tests, lib/gendata.c, lib/gentr46map.c
include:
- template: Security/SAST.gitlab-ci.yml

# https://www.synopsys.com/blogs/software-security/integrating-coverity-scan-with-gitlab-ci/
Coverity:
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true"
  - when: manual
  image: $CI_REGISTRY/libidn/build-images:libidn2-mini-Debian-testing
  stage: build
  allow_failure: true
  before_script:
  - apt-get update -qq -y
  - apt-get install -y -q curl
  script:
  - test -n "$COVERITY_SCAN_TOKEN" && test -n "$COVERITY_SCAN_PROJECT_NAME"
  - curl -o /tmp/cov-analysis-linux64.tgz https://scan.coverity.com/download/linux64
    --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
  - sha1sum /tmp/cov-analysis-linux64.tgz
  - tar xfz /tmp/cov-analysis-linux64.tgz
  - time ./bootstrap --skip-po
  - time ./configure --enable-gcc-warnings=error --disable-doc CFLAGS="-g -Og"
  - cov-analysis-linux64-*/bin/cov-build --dir cov-int make check -j$(nproc)
  - tar cfz cov-int.tar.gz cov-int
  - curl https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
    --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
    --form file=@cov-int.tar.gz --form version="`git describe --tags`"
    --form description="`git describe --tags` / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID"
  artifacts:
    expire_in: 1 week
    paths:
      - cov-int/*.txt

# https://docs.gitlab.com/ee/ci/runners/saas/macos/environment.html
B-macOS14Xcode15:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  stage: build
  image: macos-14-xcode-15
  tags: [ saas-macos-medium-m1 ]
  variables:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_UPGRADE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
    WERROR_CFLAGS: "-Wno-error=format-nonliteral"
  before_script:
  - brew install autoconf automake libtool gengetopt help2man texinfo coreutils
  script:
  - PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"; export PATH
  - time ./bootstrap --skip-po
  - time ./configure --enable-gcc-warnings=error
  - make syntax-check
  - time make -j$(nproc) check -k V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

macOS13Xcode14:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: macos-13-xcode-14
  tags: [ saas-macos-medium-m1 ]
  stage: test
  needs: [B-Trisquel11]
  variables:
    WERROR_CFLAGS: "-Wno-error=format-nonliteral"
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error WERROR_CFLAGS="-Wno-error=unused-value -Wno-error=format-nonliteral -Wno-error=attributes -Wno-error=char-subscripts"
  - make syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t

B-MinGW64:
  stage: build
  image: $CI_REGISTRY/libidn/build-images:libidn2-Fedora29-MinGW64
  before_script:
  - mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc
  - echo ':DOSWin:M::MZ::/usr/bin/wine64:' > /proc/sys/fs/binfmt_misc/register
  script:
  - ./bootstrap --skip-po
  - mingw64-configure --disable-valgrind-tests --disable-doc
  - mingw64-make -j$(nproc)
  - mingw64-make -j$(nproc) check VERBOSE=t

# https://docs.gitlab.com/ee/ci/runners/saas/windows_saas_runner.html
B-Windows-UCRT64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ shared-windows, windows-1809 ]
  stage: build
  variables:
    WERROR_CFLAGS: "-Wno-error=format-nonliteral -Wno-error=unused-value"
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'UCRT64' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu git autoconf automake libtool make mingw-w64-ucrt-x86_64-gcc help2man gengetopt gperf patch gettext-devel texinfo
    # https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings
    file configure.ac
    git config --global core.autocrlf false
    git config --global core.eol lf
    git rm -rf --cached . | tail
    git reset --hard HEAD
    file configure.ac
    ./bootstrap --skip-po
    ./configure --enable-gcc-warnings=error
    make -j$(nproc) V=1 -k check VERBOSE=t'
  - C:\msys64\usr\bin\bash -lc 'grep ^PASS tests/test-register.log'

Windows-MSYS:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ shared-windows, windows-1809 ]
  stage: test
  needs: [B-Trisquel11]
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral -Wno-error=attributes -Wno-error=char-subscripts"
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'MSYS' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu make gcc libiconv-devel
    tar xfa libidn2-*.tar.gz
    cd `ls -d libidn2-* | grep -v tar.gz`
    ./configure --enable-gcc-warnings=error
    make -j$(nproc) V=1 -k check VERBOSE=t'
  - C:\msys64\usr\bin\bash -lc 'grep ^PASS tests/test-register.log'

Windows-MINGW64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ shared-windows, windows-1809 ]
  stage: test
  needs: [B-Trisquel11]
  variables:
    WERROR_CFLAGS: "-Wno-error=format-nonliteral -Wno-error=unused-value"
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'MINGW64' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu make mingw-w64-x86_64-gcc
    tar xfa libidn2-*.tar.gz
    cd `ls -d libidn2-* | grep -v tar.gz`
    ./configure --enable-gcc-warnings=error
    make -j$(nproc) V=1 -k check VERBOSE=t'
  - C:\msys64\usr\bin\bash -lc 'grep ^PASS tests/test-register.log'

Debian5:
  image: debian/eol:lenny
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update
  - apt-get install -y -qq make gcc locales-all
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

Debian9:
  image: debian:stretch
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
  - apt-get update || true
  - apt-get install -y -qq make gcc
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

Debian10:
  image: debian:buster
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update
  - apt-get install -y -qq make gcc
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

Debian-testing:
  image: debian:testing
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update
  - apt-get install -y -qq make gcc
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings=error
  - grep am_cv_func_iconv_summary config.log
  - cd ..
  - apt-get install -y -qq autoconf autopoint libtool gtk-doc-tools
  - AUTOPOINT=true autoreconf -fvi
  - ./configure --enable-gcc-warnings=error
  - grep am_cv_func_iconv_summary config.log
  - make -j$(nproc) -k check V=1 VERBOSE=t

Alpine:
  image: alpine:latest
  stage: test
  needs: [B-Debian-testing]
  before_script:
  - echo "ipv6" >> /etc/modules
  - apk update
  - apk add build-base
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral"
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

ArchLinux:
  image: archlinux:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - pacman -Syu --noconfirm make gcc diffutils
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

CentOS7:
  image: centos:7
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - yum -y install make gcc diffutils valgrind libunistring-devel
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

AlmaLinux8:
  image: almalinux:8
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf --enablerepo=powertools -y install make gcc diffutils valgrind libunistring-devel
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

RockyLinux9-ppc64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: rockylinux:9
  tags: [ ppc64 ]
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf --enablerepo=crb -y install make gcc diffutils valgrind libunistring-devel
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu14.04:
  image: ubuntu:14.04
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq make gcc
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

Trisquel11:
  image: kpengboy/trisquel:11.0
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq make gcc
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

Ubuntu-rolling:
  image: ubuntu:rolling
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq git make gcc gtk-doc-tools texinfo texlive texlive-plain-generic dblatex
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t
  - make -j$(nproc) -k distcheck
  # check if essential files are accidentally cleaned
  - make clean
  - make -j$(nproc) -k

armcross:
  image: debian:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dpkg --add-architecture armel
  - apt-get update -qq
  - apt-get install -y -qq make gcc-arm-linux-gnueabi libstdc++6:armel
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=arm-linux-gnueabi --enable-gcc-warnings=error
  - make -j$(nproc) -k V=1
  - arm-linux-gnueabi-readelf -h lib/.libs/libidn2.so
  - arm-linux-gnueabi-readelf -h src/.libs/idn2
  - make -j$(nproc) -k check VERBOSE=t

Mingw32:
  image: debian:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dpkg --add-architecture i386
  - apt-get update -qq
  - apt-get install -y -qq make mingw-w64 wine wine32 libwine libwine:i386 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral"
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=i686-w64-mingw32 CC='i686-w64-mingw32-gcc -static-libgcc' --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

Mingw64:
  image: debian:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dpkg --add-architecture i386
  - apt-get update -qq
  - apt-get install -y -qq make mingw-w64 wine wine32 wine64 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral"
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=x86_64-w64-mingw32 --enable-gcc-warnings=error
  - make -j$(nproc) -k check V=1 VERBOSE=t

.pages:
  stage: build
  needs: ["B-Fedora39-clang-analyzer"]
  image: $CI_REGISTRY/libidn/build-images:libidn2-Debian12
  before_script:
  - apt-get install -y -q lcov
  script:
  - rm -rf public
  - mkdir -p public
  - mv clang-analyzer/* public/clang-analyzer
  - mv doc/manual public/manual
  - mv doc/reference/html public/reference
  - mv doc/reference/libidn2.pdf public/reference/
  - ./bootstrap --skip-po
  - CFLAGS="-g -O0" ./configure --enable-gtk-doc --enable-code-coverage --disable-gcc-warnings
  - make -j$(nproc) check VERBOSE=t
  - make local-code-coverage-output
  - mv Libidn2-*-coverage public/coverage
  - make clean
  - make
  - make -C fuzz check VERBOSE=t
  - make code-coverage-capture
  - contrib/make-coverage-badge "fuzz-coverage"
  - mv Libidn2-*-coverage public/fuzz-coverage
  - mv badge.svg public/fuzz-coverage/
  artifacts:
    when: on_success
    paths:
      - public

pages:
  extends: .pages
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages-test:
  extends: .pages
  rules:
  - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
