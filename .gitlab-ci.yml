# Copyright (C) 2016-2022 Simon Josefsson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

stages:
  - quick
  - build
  - test

# The quick stage should complete as quickly as possible but still
# excercise the internal self-tests.  Primarily this is achieved by
# --disable-doc and thus avoiding the 'make dist' step.  Having an
# early stage like this avoids wasting build cycles attempting the
# bootstrap builds on many platforms.

# The build stage should attempt to build from version controlled
# sources on platforms we support development on, with the variety of
# pre-dependencies that we want to support.  Typically these builds
# results in a tarball artifact.

# The test stage attempt to build the tarball on all platforms we
# support building the project on, with as many combinations of
# pre-depencencies as useful.

variables:
  BUILD_IMAGES_PROJECT: libidn/build-images
  DEBIAN_BUILD: buildenv-debian-buster
  FEDORA_BUILD: buildenv-fedora
  BASE_BUILD: buildenv-basic
  GET_SOURCES_ATTEMPTS: "3"

B-Debian-quick:
  image: $CI_REGISTRY/libidn/build-images:libidn2-quick-Debian-testing
  stage: quick
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-gcc-warnings --disable-doc || (cat config.log; exit 1)
  - time make syntax-check gnulib_dir=$GNULIB_SRCDIR
  - time make V=1
  - time make check || (find . -name test-suite.log -exec cat {} +; exit 1)

sast:
  stage: quick
  # SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
  variables:
    SAST_EXCLUDED_PATHS: examples, fuzz, tests, lib/gendata.c, lib/gentr46map.c
include:
- template: Security/SAST.gitlab-ci.yml

B-Alpine-quick:
  image: $CI_REGISTRY/libidn/build-images:libidn2-quick-Alpine
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-gcc-warnings --disable-doc || (cat config.log; exit 1)
  - time make V=1
  - time make syntax-check
  - time make check || (find . -name test-suite.log -exec cat {} +; exit 1)

B-AlmaLinux8:
  image: $CI_REGISTRY/libidn/build-images:libidn2-AlmaLinux8
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure || (cat config.log; exit 1)
  - time make V=1
  - time make check || (find . -name test-suite.log -exec cat {} +; exit 1)
  - rm -rf contrib/ # FIXME XXX remove once we support modern abidiff -- see issue #102
  - time make dist
  artifacts:
    expire_in: 2 weeks
    paths:
    - libidn2-*.tar.gz

B-Debian11:
  image: $CI_REGISTRY/libidn/build-images:libidn2-Debian11
  stage: build
  script:
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -q indent help2man
  - ./bootstrap --skip-po --no-git
  - ./configure --enable-gcc-warnings --enable-valgrind-tests || (cat config.log; exit 1)
  - make V=1
  - make check || (find . -name test-suite.log -exec cat {} +; exit 1)
  - make -C doc compare-makefile
  - make syntax-check
  - make dist
  artifacts:
    expire_in: 2 weeks
    paths:
    - libidn2-*.tar.gz

B-Debian-testing:
  image: debian:testing
  stage: build
  before_script:
  - apt-get update -qq -y
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -q git make autoconf automake libtool gettext autopoint gperf libunistring-dev valgrind gengetopt help2man texinfo texlive git2cl gtk-doc-tools
  script:
  - ./bootstrap --skip-po
  - ./configure --enable-gcc-warnings --enable-valgrind-tests || (cat config.log; exit 1)
  - make V=1
  - make check || (find . -name test-suite.log -exec cat {} +; exit 1)
  - rm -rf contrib/ # FIXME XXX remove once we support modern abidiff -- see issue #102
  - make dist
  artifacts:
    expire_in: 2 weeks
    paths:
    - libidn2-*.tar.gz

B-armcross:
  image: $CI_REGISTRY/libidn/build-images:libidn2-Debian11
  stage: build
  before_script:
  - apt-get update -qq -y
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -q gcc-arm-linux-gnueabi qemu-user qemu-user-binfmt file
  - update-binfmts --enable qemu-arm
  script:
  - ./bootstrap --skip-po --no-git
  - ./configure --enable-gcc-warnings --disable-doc || (cat config.log; exit 1)
  - make V=1
  - ./configure --enable-gcc-warnings --disable-doc --host=arm-linux-gnueabi CFLAGS="-static --static" || (cat config.log; exit 1)
  - make V=1
  - file src/idn2
  - LANG=C.UTF-8 qemu-arm src/idn2 --debug foo
  - make check

# https://releases.llvm.org/13.0.0/tools/clang/docs/AddressSanitizer.html
# https://releases.llvm.org/13.0.0/tools/clang/docs/UndefinedBehaviorSanitizer.html
# https://lists.gnu.org/archive/html/bug-gnulib/2022-03/msg00016.html
B-Fedora35-ASAN/UBSan:
  stage: build
  image: $CI_REGISTRY/libidn/build-images:libidn2-Fedora35
  script:
  - ./bootstrap --skip-po --no-git
  - export CC=clang
  - export CFLAGS="-fsanitize=address -g -O0"
  - ASAN_OPTIONS=detect_leaks=0 ./configure --disable-doc --disable-gcc-warnings
  - make V=1 -j$(nproc) check
  - make clean
  - export CFLAGS="-fsanitize=undefined,integer -fno-sanitize-recover=undefined,integer -g -O0"
  - ./configure --disable-doc --disable-gcc-warnings
  - make V=1 -C unistring
  - make V=1 -C gl
  - make V=1 -C lib CFLAGS="$CFLAGS -Wall -Wextra -Werror"
  - make V=1 -C examples CFLAGS="$CFLAGS -Wall -Wextra -Werror -Wno-unused-parameter"
  - make V=1 -j$(nproc) check
  artifacts:
    expire_in: 2 weeks
    when: on_failure
    paths:
      - ./config.h
      - ./*.log
      - tests/*.log

T-Debian5:
  image: debian/eol:lenny
  stage: test
  needs: [B-Debian11]
  before_script:
  - apt-get update
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc locales-all
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-Debian9:
  image: debian:stretch
  stage: test
  needs: [B-Debian11]
  before_script:
  - apt-get update
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-Debian10:
  image: debian:buster
  stage: test
  needs: [B-Debian11]
  before_script:
  - apt-get update
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-Alpine:
  image: alpine:latest
  stage: test
  needs: [B-Debian-testing]
  before_script:
  - echo "ipv6" >> /etc/modules
  - apk update
  - apk add build-base
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-ArchLinux:
  image: archlinux:latest
  stage: test
  needs: [B-Debian11]
  before_script:
  - pacman -Syu --noconfirm make gcc diffutils
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-CentOS7:
  image: centos:7
  stage: test
  needs: [B-Debian11]
  before_script:
  - yum -y install make gcc diffutils valgrind libunistring-devel
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-AlmaLinux8:
  image: almalinux:8
  stage: test
  needs: [B-Debian11]
  before_script:
  - dnf --enablerepo=powertools -y install make gcc diffutils valgrind libunistring-devel
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-Ubuntu-14.04:
  image: ubuntu:14.04
  stage: test
  needs: [B-Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-Ubuntu rolling:
  image: ubuntu:rolling
  stage: test
  needs: [B-Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq git make gcc gtk-doc-tools texinfo texlive texlive-plain-generic dblatex
  script:
  - tar xfa libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - ./configure --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)
  - make distcheck
  artifacts:
    expire_in: 2 weeks
    paths:
    - libidn2-*.tar.gz

T-Mingw32:
  image: debian:latest
  stage: test
  needs: [B-Debian11]
  before_script:
  - dpkg --add-architecture i386
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make mingw-w64 wine wine32 libwine libwine:i386 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=i686-w64-mingw32 CC='i686-w64-mingw32-gcc -static-libgcc' --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-Mingw64:
  image: debian:latest
  stage: test
  needs: [B-Debian11]
  before_script:
  - dpkg --add-architecture i386
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make mingw-w64 wine wine32 wine64 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=x86_64-w64-mingw32 --enable-gcc-warnings || (cat config.log; exit 1)
  - make check V=1 || (find . -name test-suite.log -exec cat {} +; exit 1)

T-armcross:
  image: debian:latest
  stage: test
  needs: [B-Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc-arm-linux-gnueabi
  script:
  - tar xfz libidn2-*.tar.gz
  - cd `ls -d libidn2-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=arm-linux-gnueabi --enable-gcc-warnings || (cat config.log; exit 1)
  - make V=1
  - arm-linux-gnueabi-readelf -h lib/.libs/libidn2.so
  - arm-linux-gnueabi-readelf -h src/.libs/idn2

# In this build we combine
#  * syntax-check
#  * abi-check
# It is not run on tags
abi-check:
  stage: build
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$DEBIAN_BUILD
  script:
  - ./bootstrap --skip-po
  - CFLAGS="-g -Og" ./configure -C --disable-doc
  - make syntax-check
  - make -j$(nproc)
  - make abi-check
  tags:
  - shared
  except:
  - tags
  artifacts:
    expire_in: 2 weeks
    when: on_failure
    paths:
      - ./config.h
      - ./*.log
      - tests/*.log
      - compat_reports/

# In this build we do
#  * distcheck
dist-check:
  stage: build
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$DEBIAN_BUILD
  script:
  - ./bootstrap --skip-po
  - ./configure -C --enable-gtk-doc --enable-gtk-doc-pdf --disable-gcc-warnings --disable-valgrind-tests
  - make -j$(nproc)
  - DISTCHECK_CONFIGURE_FLAGS=--disable-gtk-doc make distcheck
  tags:
  - shared
  artifacts:
    expire_in: 2 weeks
    when: on_failure
    paths:
      - libidn2-*
  artifacts:
    expire_in: 2 weeks
    when: on_success
    paths:
      - ./config.h
      - ./*.log
      - libidn2-*.gz

clang-analyzer/Fedora:
  stage: build
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$FEDORA_BUILD
  script:
  - ./bootstrap --skip-po
  - scan-build ./configure --disable-doc --enable-gcc-warnings
  - make -j$(nproc) -C unistring
  - make -j$(nproc) -C gl
  - scan-build --status-bugs -o scan-build-lib make -j$(nproc) -C lib
  tags:
  - shared
  except:
  - tags
  artifacts:
    expire_in: 2 weeks
    when: on_failure
    paths:
      - ./config.h
      - ./*.log
      - scan-build-lib/*

pages:
  stage: build
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$DEBIAN_BUILD
  script:
  - ./bootstrap --skip-po
  - CFLAGS="-g -O0" ./configure --enable-gtk-doc --enable-code-coverage --disable-gcc-warnings
  - make -j$(nproc) check
  - make local-code-coverage-output
  - mkdir -p public
  - rm -rf public/coverage
  - mv Libidn2-*-coverage public/coverage
  - rm -rf public/reference
  - mv doc/reference/html public/reference
  - make web-manual
  - rm -rf public/manual
  - mv doc/manual public/manual
  - make clean
  - make
  - make -C fuzz check
  - make code-coverage-capture
  - contrib/make-coverage-badge "fuzz-coverage"
  - rm -rf public/fuzz-coverage
  - mv Libidn2-*-coverage public/fuzz-coverage
  - mv badge.svg public/fuzz-coverage/
  tags:
  - shared
  artifacts:
    when: on_success
    paths:
      - public
  only:
    - master

# Target to run code coverage on non-master branches. That is intended
# to ensure that compilation in master will not break the pages rule.
pages-test:
  stage: build
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$DEBIAN_BUILD
  script:
  - ./bootstrap --skip-po
  - CFLAGS="-g -O0" ./configure --enable-gtk-doc --enable-code-coverage --disable-gcc-warnings
  - make -j$(nproc) check
  - make local-code-coverage-output
  - make web-manual
  - make clean
  - make
  - make -C fuzz check
  - make code-coverage-capture
  - contrib/make-coverage-badge "fuzz-coverage"
  tags:
  - shared
  except:
    - master

MinGW64:
  stage: build
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$FEDORA_BUILD
  before_script:
  - mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc
  - echo ':DOSWin:M::MZ::/usr/bin/wine64:' > /proc/sys/fs/binfmt_misc/register
  script:
  - ./bootstrap --skip-po
  - mingw64-configure --disable-valgrind-tests --disable-doc
  - mingw64-make -j$(nproc)
  - mingw64-make -j$(nproc) check
  tags:
  - shared
  - docker
  except:
  - tags
  artifacts:
    expire_in: 2 weeks
    when: on_failure
    paths:
      - ./config.h
      - ./*.log
      - tests/*.log

# After having issues with building from tarball (make distcheck was ok),
# outside a git repo, we test the tarball stand-alone.
Tarball:
  stage: test
  image: $CI_REGISTRY/$BUILD_IMAGES_PROJECT:$BASE_BUILD
  variables:
    GIT_STRATEGY: none
  script:
    # remove all files from git repo
    - mv libidn2-*.gz /tmp
    - rm -rf * .git* .travis*
    - mv /tmp/libidn2-*.gz .
    # unpack and build from tarball
    - tar xvf libidn2-*.gz
    - cd libidn2-*
    - ./configure || (cat config.log; exit 1)
    - make
    - make check || (find . -name test-suite.log -exec cat {} +; exit 1)
    # check if essential files are accidentally cleaned
    - make clean
    - make
  tags:
    - shared
  dependencies:
    - dist-check
  artifacts:
    expire_in: 2 weeks
    when: on_failure
    paths:
      - libidn2-*/config.h
      - libidn2-*/*.log
      - libidn2-*/*/*.log
